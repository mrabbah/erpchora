<?xml version='1.0'?>
<CodeNarc url='http://www.codenarc.org' version='0.17'><Report timestamp='22 juil. 2013 10:12:37'/><Project title='Static Analysis Rules Report'><SourceDirectory></SourceDirectory></Project><PackageSummary totalFiles='164' filesWithViolations='65' priority1='0' priority2='109' priority3='11'></PackageSummary><Package path='grails-app' totalFiles='160' filesWithViolations='64' priority1='0' priority2='109' priority3='10'></Package><Package path='grails-app/controllers' totalFiles='2' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='grails-app/controllers/com' totalFiles='2' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='grails-app/controllers/com/choranet' totalFiles='2' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='grails-app/controllers/com/choranet/securite' totalFiles='2' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='grails-app/domain' totalFiles='78' filesWithViolations='48' priority1='0' priority2='52' priority3='4'></Package><Package path='grails-app/domain/com' totalFiles='78' filesWithViolations='48' priority1='0' priority2='52' priority3='4'></Package><Package path='grails-app/domain/com/choranet' totalFiles='78' filesWithViolations='48' priority1='0' priority2='52' priority3='4'></Package><Package path='grails-app/domain/com/choranet/commun' totalFiles='9' filesWithViolations='3' priority1='0' priority2='5' priority3='0'><File name='DocumentNumerique.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='4'><SourceLine><![CDATA[class DocumentNumerique implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.commun.DocumentNumerique defines equals(Object) but not hashCode()]]></Message></Violation><Violation ruleName='GrailsDomainHasToString' priority='2' lineNumber='4'><SourceLine><![CDATA[class DocumentNumerique implements Serializable {]]></SourceLine><Message><![CDATA[The domain class com.choranet.commun.DocumentNumerique should define a toString() method]]></Message></Violation></File><File name='Parametrage.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='5'><SourceLine><![CDATA[class Parametrage implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.commun.Parametrage defines equals(Object) but not hashCode()]]></Message></Violation><Violation ruleName='GrailsDomainHasToString' priority='2' lineNumber='5'><SourceLine><![CDATA[class Parametrage implements Serializable {]]></SourceLine><Message><![CDATA[The domain class com.choranet.commun.Parametrage should define a toString() method]]></Message></Violation></File><File name='Ville.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='11'><SourceLine><![CDATA[class Ville implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.commun.Ville defines equals(Object) but not hashCode()]]></Message></Violation></File></Package><Package path='grails-app/domain/com/choranet/compta' totalFiles='10' filesWithViolations='7' priority1='0' priority2='7' priority3='0'><File name='CompteComptable.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='9'><SourceLine><![CDATA[class CompteComptable implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.compta.CompteComptable defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='DeclarationTva.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='11'><SourceLine><![CDATA[class DeclarationTva implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.compta.DeclarationTva defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Devise.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='8'><SourceLine><![CDATA[class Devise implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.compta.Devise defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Ecriture.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='10'><SourceLine><![CDATA[class Ecriture implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.compta.Ecriture defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Exercice.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='9'><SourceLine><![CDATA[class Exercice implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.compta.Exercice defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Journal.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='8'><SourceLine><![CDATA[class Journal implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.compta.Journal defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Periode.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='8'><SourceLine><![CDATA[class Periode implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.compta.Periode defines equals(Object) but not hashCode()]]></Message></Violation></File></Package><Package path='grails-app/domain/com/choranet/exception' totalFiles='3' filesWithViolations='2' priority1='0' priority2='2' priority3='0'><File name='Depenses.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='10'><SourceLine><![CDATA[class Depenses implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.exception.Depenses defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='PaiementJbl.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='9'><SourceLine><![CDATA[class PaiementJbl implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.exception.PaiementJbl defines equals(Object) but not hashCode()]]></Message></Violation></File></Package><Package path='grails-app/domain/com/choranet/gesticom' totalFiles='18' filesWithViolations='11' priority1='0' priority2='11' priority3='1'><File name='BonCommande.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='11'><SourceLine><![CDATA[class BonCommande implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.gesticom.BonCommande defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='BonLivraison.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='11'><SourceLine><![CDATA[class BonLivraison implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.gesticom.BonLivraison defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='BonPret.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='11'><SourceLine><![CDATA[class BonPret implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.gesticom.BonPret defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Contact.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='9'><SourceLine><![CDATA[class Contact implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.gesticom.Contact defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Devis.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='9'><SourceLine><![CDATA[class Devis implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.gesticom.Devis defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Facture.groovy'><Violation ruleName='UnnecessaryGroovyImport' priority='3' lineNumber='6'><SourceLine><![CDATA[import java.util.List]]></SourceLine></Violation><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='11'><SourceLine><![CDATA[class Facture implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.gesticom.Facture defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='LigneProduit.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='10'><SourceLine><![CDATA[class LigneProduit implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.gesticom.LigneProduit defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Paiement.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='13'><SourceLine><![CDATA[class Paiement implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.gesticom.Paiement defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Partenaire.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='14'><SourceLine><![CDATA[class Partenaire implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.gesticom.Partenaire defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='RegleFacturationAutomatique.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='10'><SourceLine><![CDATA[class RegleFacturationAutomatique implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.gesticom.RegleFacturationAutomatique defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='ReglePrix.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='12'><SourceLine><![CDATA[class ReglePrix implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.gesticom.ReglePrix defines equals(Object) but not hashCode()]]></Message></Violation></File></Package><Package path='grails-app/domain/com/choranet/projet' totalFiles='17' filesWithViolations='15' priority1='0' priority2='15' priority3='0'><File name='AffectationOutil.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='9'><SourceLine><![CDATA[class AffectationOutil implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.projet.AffectationOutil defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='AffectationOutillage.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='9'><SourceLine><![CDATA[class AffectationOutillage implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.projet.AffectationOutillage defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='AffectationProduit.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='11'><SourceLine><![CDATA[class AffectationProduit implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.projet.AffectationProduit defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='ChargeDivers.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='8'><SourceLine><![CDATA[class ChargeDivers implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.projet.ChargeDivers defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='LocationOutil.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='8'><SourceLine><![CDATA[class LocationOutil implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.projet.LocationOutil defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Loueur.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='8'><SourceLine><![CDATA[class Loueur implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.projet.Loueur defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Note.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='8'><SourceLine><![CDATA[class Note implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.projet.Note defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='OutilEmploye.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='9'><SourceLine><![CDATA[class OutilEmploye implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.projet.OutilEmploye defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='OutilLouable.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='7'><SourceLine><![CDATA[class OutilLouable implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.projet.OutilLouable defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='OutillageCollectif.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='7'><SourceLine><![CDATA[class OutillageCollectif implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.projet.OutillageCollectif defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Phase.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='9'><SourceLine><![CDATA[class Phase implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.projet.Phase defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Projet.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='11'><SourceLine><![CDATA[class Projet implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.projet.Projet defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Soustraitance.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='8'><SourceLine><![CDATA[class Soustraitance implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.projet.Soustraitance defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Soustraitant.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='8'><SourceLine><![CDATA[class Soustraitant implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.projet.Soustraitant defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Tache.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='10'><SourceLine><![CDATA[class Tache implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.projet.Tache defines equals(Object) but not hashCode()]]></Message></Violation></File></Package><Package path='grails-app/domain/com/choranet/rh' totalFiles='3' filesWithViolations='1' priority1='0' priority2='1' priority3='0'><File name='FichePresence.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='10'><SourceLine><![CDATA[class FichePresence implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.rh.FichePresence defines equals(Object) but not hashCode()]]></Message></Violation></File></Package><Package path='grails-app/domain/com/choranet/securite' totalFiles='6' filesWithViolations='2' priority1='0' priority2='4' priority3='0'><File name='ChoraBarrage.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='9'><SourceLine><![CDATA[class ChoraBarrage implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.securite.ChoraBarrage defines equals(Object) but not hashCode()]]></Message></Violation><Violation ruleName='GrailsDomainHasToString' priority='2' lineNumber='9'><SourceLine><![CDATA[class ChoraBarrage implements Serializable {]]></SourceLine><Message><![CDATA[The domain class com.choranet.securite.ChoraBarrage should define a toString() method]]></Message></Violation></File><File name='Cle.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='9'><SourceLine><![CDATA[class Cle implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.securite.Cle defines equals(Object) but not hashCode()]]></Message></Violation><Violation ruleName='GrailsDomainHasToString' priority='2' lineNumber='9'><SourceLine><![CDATA[class Cle implements Serializable {]]></SourceLine><Message><![CDATA[The domain class com.choranet.securite.Cle should define a toString() method]]></Message></Violation></File></Package><Package path='grails-app/domain/com/choranet/stock' totalFiles='12' filesWithViolations='7' priority1='0' priority2='7' priority3='3'><File name='AlertsSecuriteStock.groovy'><Violation ruleName='UnnecessaryGroovyImport' priority='3' lineNumber='6'><SourceLine><![CDATA[import java.util.Date;]]></SourceLine></Violation><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='11'><SourceLine><![CDATA[class AlertsSecuriteStock implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.stock.AlertsSecuriteStock defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='CategorieProduit.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='10'><SourceLine><![CDATA[class CategorieProduit implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.stock.CategorieProduit defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Inventaire.groovy'><Violation ruleName='UnnecessaryGroovyImport' priority='3' lineNumber='6'><SourceLine><![CDATA[import java.util.Date;]]></SourceLine></Violation><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='11'><SourceLine><![CDATA[class Inventaire implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.stock.Inventaire defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='LigneInventaire.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='10'><SourceLine><![CDATA[class LigneInventaire implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.stock.LigneInventaire defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Livraison.groovy'><Violation ruleName='UnnecessaryGroovyImport' priority='3' lineNumber='4'><SourceLine><![CDATA[import java.util.Date]]></SourceLine></Violation><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='11'><SourceLine><![CDATA[class Livraison implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.stock.Livraison defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='MouvementStock.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='11'><SourceLine><![CDATA[class MouvementStock implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.stock.MouvementStock defines equals(Object) but not hashCode()]]></Message></Violation></File><File name='Securitestock.groovy'><Violation ruleName='EqualsAndHashCode' priority='2' lineNumber='9'><SourceLine><![CDATA[class Securitestock implements Serializable {]]></SourceLine><Message><![CDATA[The class com.choranet.stock.Securitestock defines equals(Object) but not hashCode()]]></Message></Violation></File></Package><Package path='grails-app/services' totalFiles='80' filesWithViolations='16' priority1='0' priority2='57' priority3='6'></Package><Package path='grails-app/services/com' totalFiles='80' filesWithViolations='16' priority1='0' priority2='57' priority3='6'></Package><Package path='grails-app/services/com/choranet' totalFiles='80' filesWithViolations='16' priority1='0' priority2='57' priority3='6'></Package><Package path='grails-app/services/com/choranet/commun' totalFiles='11' filesWithViolations='4' priority1='0' priority2='42' priority3='1'><File name='BackupRestoreService.groovy'><Violation ruleName='CatchException' priority='2' lineNumber='75'><SourceLine><![CDATA[} catch(Exception ex) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='76'><SourceLine><![CDATA[throw new Exception("Impossible de supprimer la base de donn&#xe9;e courante", ex)]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='109'><SourceLine><![CDATA[} catch(Exception ex) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='110'><SourceLine><![CDATA[throw new Exception("Impossible d'ins&#xe9;rer dans la base de donn&#xe9;es les objets : " + objets, ex)]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='118'><SourceLine><![CDATA[} catch (Exception ex) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='119'><SourceLine><![CDATA[throw new Exception("Probl&#xe8;me lors de la convesion de la chaine " + xmls + " en objets", ex)]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='129'><SourceLine><![CDATA[} catch (Exception ex) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='130'><SourceLine><![CDATA[throw new Exception("Le fichier " + file.getAbsolutePath() + " est corrompu", ex)]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='138'><SourceLine><![CDATA[throw new Exception("Aucune informations sur le client trouv&#xe9; au niveau de la Base")]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='140'><SourceLine><![CDATA[throw new Exception("Vous devez indiquer un r&#xe9;p&#xe9;rtoir pour la sauveguarde de vos donn&#xe9;es")]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='145'><SourceLine><![CDATA[} catch(Exception e) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='146'><SourceLine><![CDATA[throw new Exception("Le chemin indiqu&#xe9; n'est pas une r&#xe9;p&#xe9;rtoir valide : " + info.repertoirBackup, e)]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='149'><SourceLine><![CDATA[throw new Exception("Le chemin indiqu&#xe9; n'est pas une r&#xe9;p&#xe9;rtoir valide : " + info.repertoirBackup)]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='152'><SourceLine><![CDATA[throw new Exception("Le chemin indiqu&#xe9; n'est pas un r&#xe9;p&#xe9;rtoire : " + info.repertoirBackup)]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='155'><SourceLine><![CDATA[throw new Exception("Vous n'avez pas le droit d'&#xe9;criture sur le r&#xe9;p&#xe9;rtoire : " + info.repertoirBackup)]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='378'><SourceLine><![CDATA[throw new Exception("Le fichier chorainformatiquebackup.backup n'existe pas ou n'est pas en lecture" )]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='405'><SourceLine><![CDATA[} catch(Exception ex) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='411'><SourceLine><![CDATA[throw new Exception("Le r&#xe9;pertoire de backup : " + fullPathToBackupDirectory + " n'existe pas ou n'est pas en lecture")]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='414'><SourceLine><![CDATA[throw new Exception("Le r&#xe9;pertoire de backup : " + info.repertoirBackup + " n'existe pas ou n'est pas en lecture")]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='417'><SourceLine><![CDATA[throw new Exception("Vous devez indiquer un r&#xe9;p&#xe9;rtoir pour la sauveguarde de vos donn&#xe9;es")]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation></File><File name='ExcelImporterService.groovy'><Violation ruleName='GrailsStatelessService' priority='2' lineNumber='22'><SourceLine><![CDATA[SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-hh-mm");]]></SourceLine><Message><![CDATA[Violation in class com.choranet.commun.ExcelImporterService. The class is marked as stateless but contains the non-final field 'dateFormat']]></Message></Violation><Violation ruleName='GrailsStatelessService' priority='2' lineNumber='24'><SourceLine><![CDATA[String fs = System.getProperty('file.separator');]]></SourceLine><Message><![CDATA[Violation in class com.choranet.commun.ExcelImporterService. The class is marked as stateless but contains the non-final field 'fs']]></Message></Violation><Violation ruleName='GrailsStatelessService' priority='2' lineNumber='25'><SourceLine><![CDATA[String ls = System.getProperty('line.separator');]]></SourceLine><Message><![CDATA[Violation in class com.choranet.commun.ExcelImporterService. The class is marked as stateless but contains the non-final field 'ls']]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='220'><SourceLine><![CDATA[} catch(Exception ex) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='232'><SourceLine><![CDATA[} catch(Exception ex) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='300'><SourceLine><![CDATA[} catch(Exception ex) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='312'><SourceLine><![CDATA[} catch(Exception ex) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='379'><SourceLine><![CDATA[} catch(Exception ex) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='391'><SourceLine><![CDATA[} catch(Exception ex) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='487'><SourceLine><![CDATA[} catch(Exception ex) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='499'><SourceLine><![CDATA[} catch(Exception ex) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation></File><File name='PaternCompteurService.groovy'><Violation ruleName='UnnecessaryGroovyImport' priority='3' lineNumber='5'><SourceLine><![CDATA[import java.util.Date;]]></SourceLine></Violation></File><File name='SuperService.groovy'><Violation ruleName='CatchException' priority='2' lineNumber='117'><SourceLine><![CDATA[catch(Exception e) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='215'><SourceLine><![CDATA[catch(Exception e) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='285'><SourceLine><![CDATA[catch(Exception e) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='346'><SourceLine><![CDATA[catch(Exception e) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='356'><SourceLine><![CDATA[catch(Exception e) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='367'><SourceLine><![CDATA[catch(Exception e) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='377'><SourceLine><![CDATA[throw new Exception(erreurs)]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='387'><SourceLine><![CDATA[catch(Exception e) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='397'><SourceLine><![CDATA[throw new Exception(erreurs)]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='406'><SourceLine><![CDATA[} catch(Exception e) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='408'><SourceLine><![CDATA[throw new Exception("Impossible de supprimer l'objet en cours tant qu'il a d'atures liaisons");]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation></File></Package><Package path='grails-app/services/com/choranet/compta' totalFiles='10' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='grails-app/services/com/choranet/exception' totalFiles='3' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='grails-app/services/com/choranet/gesticom' totalFiles='19' filesWithViolations='5' priority1='0' priority2='8' priority3='1'><File name='DevisService.groovy'><Violation ruleName='UnnecessaryGroovyImport' priority='3' lineNumber='4'><SourceLine><![CDATA[import java.util.Comparator;]]></SourceLine></Violation></File><File name='FactureService.groovy'><Violation ruleName='EmptyMethod' priority='2' lineNumber='46'><SourceLine><![CDATA[def updateEtatFacturationBonCommande(paiements) {]]></SourceLine><Message><![CDATA[Violation in class FactureService. The method updateEtatFacturationBonCommande is both empty and not marked with @Override]]></Message></Violation><Violation ruleName='UnusedMethodParameter' priority='2' lineNumber='46'><SourceLine><![CDATA[def updateEtatFacturationBonCommande(paiements) {]]></SourceLine><Message><![CDATA[Violation in class FactureService. Method parameter [paiements] is never referenced in the method updateEtatFacturationBonCommande of class com.choranet.gesticom.FactureService]]></Message></Violation></File><File name='PaiementService.groovy'><Violation ruleName='UnusedMethodParameter' priority='2' lineNumber='368'><SourceLine><![CDATA[def filtrer(clazz, filtre, sortedHeader, sortedDirection, ofs, maxNb, type) {]]></SourceLine><Message><![CDATA[Violation in class PaiementService. Method parameter [ofs] is never referenced in the method filtrer of class com.choranet.gesticom.PaiementService]]></Message></Violation><Violation ruleName='UnusedMethodParameter' priority='2' lineNumber='368'><SourceLine><![CDATA[def filtrer(clazz, filtre, sortedHeader, sortedDirection, ofs, maxNb, type) {]]></SourceLine><Message><![CDATA[Violation in class PaiementService. Method parameter [maxNb] is never referenced in the method filtrer of class com.choranet.gesticom.PaiementService]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='477'><SourceLine><![CDATA[catch(Exception e) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation></File><File name='PartenaireService.groovy'><Violation ruleName='UnusedVariable' priority='2' lineNumber='84'><SourceLine><![CDATA[def i=0]]></SourceLine><Message><![CDATA[The variable [i] in class com.choranet.gesticom.PartenaireService is not used]]></Message></Violation></File><File name='ReglePrixService.groovy'><Violation ruleName='UnusedMethodParameter' priority='2' lineNumber='192'><SourceLine><![CDATA[def getPrixDeduit(partenaire, ligneProduit, regleToUse) {]]></SourceLine><Message><![CDATA[Violation in class ReglePrixService. Method parameter [partenaire] is never referenced in the method getPrixDeduit of class com.choranet.gesticom.ReglePrixService]]></Message></Violation><Violation ruleName='UnusedMethodParameter' priority='2' lineNumber='247'><SourceLine><![CDATA[def getPrixDeduit(partenaire, ligneProduit, regleToUse, givenRemise) {]]></SourceLine><Message><![CDATA[Violation in class ReglePrixService. Method parameter [partenaire] is never referenced in the method getPrixDeduit of class com.choranet.gesticom.ReglePrixService]]></Message></Violation></File></Package><Package path='grails-app/services/com/choranet/projet' totalFiles='17' filesWithViolations='1' priority1='0' priority2='0' priority3='1'><File name='AffectationProduitService.groovy'><Violation ruleName='UnusedImport' priority='3' lineNumber='5'><SourceLine><![CDATA[import com.choranet.stock.MouvementStockService]]></SourceLine><Message><![CDATA[The [com.choranet.stock.MouvementStockService] import is never referenced]]></Message></Violation></File></Package><Package path='grails-app/services/com/choranet/rh' totalFiles='3' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='grails-app/services/com/choranet/securite' totalFiles='5' filesWithViolations='2' priority1='0' priority2='3' priority3='1'><File name='ChoraBarrageService.groovy'><Violation ruleName='UnnecessaryGroovyImport' priority='3' lineNumber='4'><SourceLine><![CDATA[import java.util.Date]]></SourceLine></Violation><Violation ruleName='CatchException' priority='2' lineNumber='127'><SourceLine><![CDATA[} catch(Exception ex) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation></File><File name='UtilisateurService.groovy'><Violation ruleName='GrailsStatelessService' priority='2' lineNumber='9'><SourceLine><![CDATA[private Log logger = LogFactory.getLog(UtilisateurService.class)]]></SourceLine><Message><![CDATA[Violation in class com.choranet.securite.UtilisateurService. The class is marked as stateless but contains the non-final field 'logger']]></Message></Violation><Violation ruleName='UnusedPrivateField' priority='2' lineNumber='9'><SourceLine><![CDATA[private Log logger = LogFactory.getLog(UtilisateurService.class)]]></SourceLine><Message><![CDATA[The field logger is not used within the class com.choranet.securite.UtilisateurService]]></Message></Violation></File></Package><Package path='grails-app/services/com/choranet/stock' totalFiles='12' filesWithViolations='4' priority1='0' priority2='4' priority3='2'><File name='AlertsSecuriteStockService.groovy'><Violation ruleName='UnnecessaryGroovyImport' priority='3' lineNumber='4'><SourceLine><![CDATA[import java.util.Date]]></SourceLine></Violation></File><File name='InventaireService.groovy'><Violation ruleName='UnnecessaryGroovyImport' priority='3' lineNumber='4'><SourceLine><![CDATA[import java.util.Date]]></SourceLine></Violation></File><File name='MouvementStockService.groovy'><Violation ruleName='UnusedMethodParameter' priority='2' lineNumber='282'><SourceLine><![CDATA[def update(Object object) {]]></SourceLine><Message><![CDATA[Violation in class MouvementStockService. Method parameter [object] is never referenced in the method update of class com.choranet.stock.MouvementStockService]]></Message></Violation><Violation ruleName='UnusedMethodParameter' priority='2' lineNumber='285'><SourceLine><![CDATA[def delete(Object object) {]]></SourceLine><Message><![CDATA[Violation in class MouvementStockService. Method parameter [object] is never referenced in the method delete of class com.choranet.stock.MouvementStockService]]></Message></Violation></File><File name='ProduitService.groovy'><Violation ruleName='CatchException' priority='2' lineNumber='24'><SourceLine><![CDATA[catch(Exception e) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='ThrowException' priority='2' lineNumber='34'><SourceLine><![CDATA[throw new Exception(erreurs)]]></SourceLine><Message><![CDATA[The type Exception should not be thrown]]></Message></Violation></File></Package><Package path='src' totalFiles='4' filesWithViolations='1' priority1='0' priority2='0' priority3='1'></Package><Package path='src/groovy' totalFiles='4' filesWithViolations='1' priority1='0' priority2='0' priority3='1'></Package><Package path='src/groovy/com' totalFiles='4' filesWithViolations='1' priority1='0' priority2='0' priority3='1'></Package><Package path='src/groovy/com/choranet' totalFiles='4' filesWithViolations='1' priority1='0' priority2='0' priority3='1'></Package><Package path='src/groovy/com/choranet/commun' totalFiles='1' filesWithViolations='1' priority1='0' priority2='0' priority3='1'><File name='WindowMapping.groovy'><Violation ruleName='UnnecessaryGroovyImport' priority='3' lineNumber='8'><SourceLine><![CDATA[import java.util.Map]]></SourceLine></Violation></File></Package><Package path='src/groovy/com/choranet/zk' totalFiles='3' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Rules><Rule name='AssertWithinFinallyBlock'><Description><![CDATA[Checks for assert statements within a finally block. An assert can throw an exception, hiding the original exception, if there is one.]]></Description></Rule><Rule name='AssignmentInConditional'><Description><![CDATA[An assignment operator (=) was used in a conditional test. This is usually a typo, and the comparison operator (==) was intended.]]></Description></Rule><Rule name='BigDecimalInstantiation'><Description><![CDATA[Checks for calls to the BigDecimal constructors that take a double parameter, which may result in an unexpected BigDecimal value.]]></Description></Rule><Rule name='BitwiseOperatorInConditional'><Description><![CDATA[Checks for bitwise operations in conditionals, if you need to do a bitwise operation then it is best practive to extract a temp variable.]]></Description></Rule><Rule name='BooleanGetBoolean'><Description><![CDATA[This rule catches usages of java.lang.Boolean.getBoolean(String) which reads a boolean from the System properties. It is often mistakenly used to attempt to read user input or parse a String into a boolean. It is a poor piece of API to use; replace it with System.properties['prop'].]]></Description></Rule><Rule name='BrokenNullCheck'><Description><![CDATA[Looks for faulty checks for null that can cause a NullPointerException.]]></Description></Rule><Rule name='BrokenOddnessCheck'><Description><![CDATA[The code uses x % 2 == 1 to check to see if a value is odd, but this won't work for negative numbers (e.g., (-5) % 2 == -1). If this code is intending to check for oddness, consider using x & 1 == 1, or x % 2 != 0.]]></Description></Rule><Rule name='CatchArrayIndexOutOfBoundsException'><Description><![CDATA[Check the size of the array before accessing an array element rather than catching ArrayIndexOutOfBoundsException.]]></Description></Rule><Rule name='CatchError'><Description><![CDATA[Catching Error is dangerous; it can catch exceptions such as ThreadDeath and OutOfMemoryError.]]></Description></Rule><Rule name='CatchException'><Description><![CDATA[Catching Exception is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.]]></Description></Rule><Rule name='CatchIllegalMonitorStateException'><Description><![CDATA[Dubious catching of IllegalMonitorStateException. IllegalMonitorStateException is generally only thrown in case of a design flaw in your code (calling wait or notify on an object you do not hold a lock on).]]></Description></Rule><Rule name='CatchIndexOutOfBoundsException'><Description><![CDATA[Check that an index is valid before accessing an indexed element rather than catching IndexOutOfBoundsException.]]></Description></Rule><Rule name='CatchNullPointerException'><Description><![CDATA[Catching NullPointerException is never appropriate. It should be avoided in the first place with proper null checking, and it can mask underlying errors.]]></Description></Rule><Rule name='CatchRuntimeException'><Description><![CDATA[Catching RuntimeException is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.]]></Description></Rule><Rule name='CatchThrowable'><Description><![CDATA[Catching Throwable is dangerous; it can catch exceptions such as ThreadDeath and OutOfMemoryError.]]></Description></Rule><Rule name='ClassForName'><Description><![CDATA[Using Class.forName(...) is a common way to add dynamic behavior to a system. However, using this method can cause resource leaks because the classes can be pinned in memory for long periods of time.]]></Description></Rule><Rule name='ComparisonOfTwoConstants'><Description><![CDATA[Checks for expressions where a comparison operator or equals() or compareTo() is used to compare two constants to each other or two literals that contain only constant values, e.g.: 23 == 67, Boolean.FALSE != false, 0.17 <= 0.99, "abc" > "ddd", [a:1] <=> [a:2], [1,2].equals([3,4]) or [a:false, b:true].compareTo(['a':34.5, b:Boolean.TRUE], where x is a variable.]]></Description></Rule><Rule name='ComparisonWithSelf'><Description><![CDATA[Checks for expressions where a comparison operator or equals() or compareTo() is used to compare a variable to itself, e.g.: x == x, x != x, x <=> x, x < x, x >= x, x.equals(x) or x.compareTo(x), where x is a variable.]]></Description></Rule><Rule name='ConfusingClassNamedException'><Description><![CDATA[This class is not derived from another exception, but ends with 'Exception'. This will be confusing to users of this class.]]></Description></Rule><Rule name='ConstantAssertExpression'><Description><![CDATA[Checks for assert statements where the assert boolean condition expression is a constant or literal value.]]></Description></Rule><Rule name='ConstantIfExpression'><Description><![CDATA[Checks for if statements with a constant value for the if expression, such as true, false, null, or a literal constant value.]]></Description></Rule><Rule name='ConstantTernaryExpression'><Description><![CDATA[Checks for ternary expressions with a constant value for the boolean expression, such as true, false, null, or a literal constant value.]]></Description></Rule><Rule name='DeadCode'><Description><![CDATA[Dead code appears after a return statement or an exception is thrown. If code appears after one of these statements then it will never be executed and can be safely deleted.]]></Description></Rule><Rule name='DoubleNegative'><Description><![CDATA[There is no point in using a double negative, it is always positive. For instance !!x can always be simplified to x. And !(!x) can as well.]]></Description></Rule><Rule name='DuplicateCaseStatement'><Description><![CDATA[Check for duplicate case statements in a switch block, such as two equal integers or strings.]]></Description></Rule><Rule name='DuplicateImport'><Description><![CDATA[Duplicate import statements are unnecessary.]]></Description></Rule><Rule name='DuplicateMapKey'><Description><![CDATA[A map literal is created with duplicated key. The map entry will be overwritten.]]></Description></Rule><Rule name='DuplicateSetValue'><Description><![CDATA[A Set literal is created with duplicate constant value. A set cannot contain two elements with the same value.]]></Description></Rule><Rule name='EmptyCatchBlock'><Description><![CDATA[In most cases, exceptions should not be caught and ignored (swallowed).]]></Description></Rule><Rule name='EmptyElseBlock'><Description><![CDATA[Empty else blocks are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyFinallyBlock'><Description><![CDATA[Empty finally blocks are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyForStatement'><Description><![CDATA[Empty for statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyIfStatement'><Description><![CDATA[Empty if statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyInstanceInitializer'><Description><![CDATA[An empty class instance initializer was found. It is safe to remove it.]]></Description></Rule><Rule name='EmptyMethod'><Description><![CDATA[A method was found without an implementation. If the method is overriding or implementing a parent method, then mark it with the @Override annotation.]]></Description></Rule><Rule name='EmptyStaticInitializer'><Description><![CDATA[An empty static initializer was found. It is safe to remove it.]]></Description></Rule><Rule name='EmptySwitchStatement'><Description><![CDATA[Empty switch statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptySynchronizedStatement'><Description><![CDATA[Empty synchronized statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyTryBlock'><Description><![CDATA[Empty try blocks are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyWhileStatement'><Description><![CDATA[Empty while statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EqualsAndHashCode'><Description><![CDATA[If either the equals(Object) or the hashCode() methods are overridden within a class, then both must be overridden.]]></Description></Rule><Rule name='EqualsOverloaded'><Description><![CDATA[The class has an equals method, but the parameter of the method is not of type Object. It is not overriding equals but instead overloading it.]]></Description></Rule><Rule name='ExceptionExtendsError'><Description><![CDATA[Errors are system exceptions. Do not extend them.]]></Description></Rule><Rule name='ExplicitGarbageCollection'><Description><![CDATA[Calls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised. Code should have the same behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not. Moreover, "modern" jvms do a very good job handling garbage collections. If memory usage issues unrelated to memory leaks develop within an application, it should be dealt with JVM options rather than within the code itself.]]></Description></Rule><Rule name='ForLoopShouldBeWhileLoop'><Description><![CDATA[A for loop without an init and update statement can be simplified to a while loop.]]></Description></Rule><Rule name='GrailsDomainHasEquals'><Description><![CDATA[Checks that Grails domain classes redefine equals().]]></Description></Rule><Rule name='GrailsDomainHasToString'><Description><![CDATA[Checks that Grails domain classes redefine toString()]]></Description></Rule><Rule name='GrailsPublicControllerMethod'><Description><![CDATA[Checks for public methods on Grails controller classes. Static methods are ignored.]]></Description></Rule><Rule name='GrailsStatelessService'><Description><![CDATA[Checks for fields on Grails service classes. Grails service classes are singletons, by default, and so they should be reentrant and typically stateless. The ignoreFieldNames property (dataSource,scope,sessionFactory,transactional,*Service) specifies one or more field names that should be ignored. The ignoreFieldTypes property (null) specifies one or more field type names that should be ignored. Both can optionally contain wildcard characters ('*' or '?').]]></Description></Rule><Rule name='HardCodedWindowsFileSeparator'><Description><![CDATA[This rule finds usages of a Windows file separator within the constructor call of a File object. It is better to use the Unix file separator or use the File.separator constant.]]></Description></Rule><Rule name='HardCodedWindowsRootDirectory'><Description><![CDATA[This rule find cases where a File object is constructed with a windows-based path. This is not portable, and using the File.listRoots() method is a better alternative.]]></Description></Rule><Rule name='ImportFromSamePackage'><Description><![CDATA[An import of a class that is within the same package is unnecessary.]]></Description></Rule><Rule name='ImportFromSunPackages'><Description><![CDATA[Avoid importing anything from the 'sun.*' packages. These packages are not portable and are likely to change.]]></Description></Rule><Rule name='IntegerGetInteger'><Description><![CDATA[This rule catches usages of java.lang.Integer.getInteger(String, ...) which reads an Integer from the System properties. It is often mistakenly used to attempt to read user input or parse a String into an Integer. It is a poor piece of API to use; replace it with System.properties['prop'].]]></Description></Rule><Rule name='MisorderedStaticImports'><Description><![CDATA[Static imports should never be declared after nonstatic imports.]]></Description></Rule><Rule name='MissingNewInThrowStatement'><Description><![CDATA[A common Groovy mistake when throwing exceptions is to forget the new keyword. For instance, "throw RuntimeException()" instead of "throw new RuntimeException()". If the error path is not unit tested then the production system will throw a Method Missing exception and hide the root cause. This rule finds constructs like "throw RuntimeException()" that look like a new keyword was meant to be used but forgotten.]]></Description></Rule><Rule name='RandomDoubleCoercedToZero'><Description><![CDATA[The Math.random() method returns a double result greater than or equal to 0.0 and less than 1.0. If you coerce this result into an Integer or int, then it is coerced to zero. Casting the result to int, or assigning it to an int field is probably a bug.]]></Description></Rule><Rule name='RemoveAllOnSelf'><Description><![CDATA[Don't use removeAll to clear a collection. If you want to remove all elements from a collection c, use c.clear, not c.removeAll(c). Calling c.removeAll(c) to clear a collection is less clear, susceptible to errors from typos, less efficient and for some collections, might throw a ConcurrentModificationException.]]></Description></Rule><Rule name='ReturnFromFinallyBlock'><Description><![CDATA[Returning from a finally block is confusing and can hide the original exception.]]></Description></Rule><Rule name='ReturnNullFromCatchBlock'><Description><![CDATA[Returning null from a catch block often masks errors and requires the client to handle error codes. In some coding styles this is discouraged.]]></Description></Rule><Rule name='SwallowThreadDeath'><Description><![CDATA[Checks for code that catches ThreadDeath without re-throwing it.]]></Description></Rule><Rule name='ThrowError'><Description><![CDATA[Checks for throwing an instance of java.lang.Error.]]></Description></Rule><Rule name='ThrowException'><Description><![CDATA[Checks for throwing an instance of java.lang.Exception.]]></Description></Rule><Rule name='ThrowExceptionFromFinallyBlock'><Description><![CDATA[Throwing an exception from a finally block is confusing and can hide the original exception.]]></Description></Rule><Rule name='ThrowNullPointerException'><Description><![CDATA[Checks for throwing an instance of java.lang.NullPointerException.]]></Description></Rule><Rule name='ThrowRuntimeException'><Description><![CDATA[Checks for throwing an instance of java.lang.RuntimeException.]]></Description></Rule><Rule name='ThrowThrowable'><Description><![CDATA[Checks for throwing an instance of java.lang.Throwable.]]></Description></Rule><Rule name='UnnecessaryGroovyImport'><Description><![CDATA[A Groovy file does not need to include an import for classes from java.lang, java.util, java.io, java.net, groovy.lang and groovy.util, as well as the classes java.math.BigDecimal and java.math.BigInteger.]]></Description></Rule><Rule name='UnusedArray'><Description><![CDATA[Checks for array allocations that are not assigned or used, unless it is the last statement within a block.]]></Description></Rule><Rule name='UnusedImport'><Description><![CDATA[Imports for a class that is never referenced within the source file is unnecessary.]]></Description></Rule><Rule name='UnusedMethodParameter'><Description><![CDATA[This rule finds instances of method parameters not being used. It does not analyze private methods (that is done by the UnusedPrivateMethodParameter rule) or methods marked @Override.]]></Description></Rule><Rule name='UnusedObject'><Description><![CDATA[Checks for object allocations that are not assigned or used, unless it is the last statement within a block.]]></Description></Rule><Rule name='UnusedPrivateField'><Description><![CDATA[Checks for private fields that are not referenced within the same class.]]></Description></Rule><Rule name='UnusedPrivateMethod'><Description><![CDATA[Checks for private methods that are not referenced within the same class.]]></Description></Rule><Rule name='UnusedPrivateMethodParameter'><Description><![CDATA[Checks for parameters to private methods that are not referenced within the method body.]]></Description></Rule><Rule name='UnusedVariable'><Description><![CDATA[Checks for variables that are never referenced.]]></Description></Rule></Rules></CodeNarc>